{
  "info": {
    "_postman_id": "b82f7253-b550-4670-89de-12718df8fe9f",
    "name": "Airport Service",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "26885583"
  },
  "item": [
    {
      "name": "CREATE AIRPORT BER",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(200);\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Response time is less than 500\", function () {\r",
              "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Response has required fields\", function () {\r",
              "    const responseData = pm.response.json();\r",
              "    \r",
              "    pm.expect(responseData).to.be.an('object');\r",
              "    pm.expect(responseData).to.have.all.keys('id', 'name', 'code', 'capacity', 'createdAt');\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"The 'id' must be a non-negative integer\", function () {\r",
              "    const responseData = pm.response.json();\r",
              "    \r",
              "    pm.expect(responseData).to.be.an('object');\r",
              "    pm.expect(responseData.id).to.be.a('number').and.to.satisfy(function(value) {\r",
              "        return Number.isInteger(value) && value >= 0;\r",
              "    }, \"The 'id' should be a non-negative integer\");\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"The createdAt field is in a valid date format\", function () {\r",
              "    const responseData = pm.response.json();\r",
              "    \r",
              "    pm.expect(responseData).to.be.an('object');\r",
              "    pm.expect(responseData.createdAt).to.exist;\r",
              "    pm.expect(new Date(responseData.createdAt).getTime()).to.not.be.NaN;\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {},
            "requests": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"name\": \"Flughafen Berlin\",\r\n    \"code\": \"BER\",\r\n    \"capacity\": 300000\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrlAirports}}",
          "host": [
            "{{baseUrlAirports}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "CREATE AIRPORT ZRH",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.eql(200);\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Response time is less than 500ms\", function () {\r",
              "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Response has required fields\", function () {\r",
              "    const responseData = pm.response.json();\r",
              "    \r",
              "    pm.expect(responseData).to.be.an('object');\r",
              "    pm.expect(responseData).to.have.all.keys('id', 'name', 'code', 'capacity', 'createdAt');\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"The id must be a non-negative integer\", function () {\r",
              "    const responseData = pm.response.json();\r",
              "    \r",
              "    pm.expect(responseData).to.have.property('id').that.is.a('number').and.is.at.least(0);\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"The createdAt field must be in a valid date format\", function () {\r",
              "    const responseData = pm.response.json();\r",
              "    \r",
              "    pm.expect(responseData).to.be.an('object');\r",
              "    pm.expect(responseData.createdAt).to.exist;\r",
              "    pm.expect(new Date(responseData.createdAt).toString()).to.not.equal(\"Invalid Date\", \"createdAt is not in a valid date format\");\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {},
            "requests": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"name\": \"Flughafen ZÃ¼rich\",\r\n    \"code\": \"ZRH\",\r\n    \"capacity\": 350000\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrlAirports}}",
          "host": [
            "{{baseUrlAirports}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "READ ALL AIRPORTS",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.eql(200);\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Response content type is application/json\", function () {\r",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Response time is less than 500ms\", function () {\r",
              "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Response is an array with the expected structure\", function () {\r",
              "    const responseData = pm.response.json();\r",
              "    \r",
              "    pm.expect(responseData).to.be.an('array');\r",
              "    \r",
              "    responseData.forEach(function(item) {\r",
              "        pm.expect(item).to.be.an('object');\r",
              "        pm.expect(item).to.have.all.keys('id', 'name', 'code', 'capacity', 'createdAt');\r",
              "        pm.expect(item.id).to.be.a('number');\r",
              "        pm.expect(item.name).to.be.a('string');\r",
              "        pm.expect(item.code).to.be.a('string');\r",
              "        pm.expect(item.capacity).to.be.a('number');\r",
              "        pm.expect(item.createdAt).to.be.a('string');\r",
              "    });\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Validate properties of the airports response\", function () {\r",
              "    const responseData = pm.response.json();\r",
              "\r",
              "    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
              "\r",
              "    responseData.forEach(function(airport) {\r",
              "        pm.expect(airport.id).to.be.a('number').and.to.be.at.least(0, \"ID must be a non-negative integer\");\r",
              "        pm.expect(airport.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
              "        pm.expect(airport.code).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");\r",
              "    });\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {},
            "requests": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrlAirports}}",
          "host": [
            "{{baseUrlAirports}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "READ AIRPORT BY CODE",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(200);\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Response time is less than 500ms\", function () {\r",
              "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Response has the required fields\", function () {\r",
              "    const responseData = pm.response.json();\r",
              "\r",
              "    pm.expect(responseData).to.be.an('object');\r",
              "    pm.expect(responseData).to.have.all.keys('id', 'name', 'code', 'capacity', 'createdAt');\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Validate that the 'id' is a non-negative integer\", function () {\r",
              "    const responseData = pm.response.json();\r",
              "    \r",
              "    pm.expect(responseData).to.be.an('object');\r",
              "    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0);\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Validate that 'createdAt' is in a valid date format\", function () {\r",
              "    const responseData = pm.response.json();\r",
              "    \r",
              "    pm.expect(responseData).to.be.an('object');\r",
              "    pm.expect(responseData.createdAt).to.exist;\r",
              "\r",
              "    // Check if 'createdAt' is a valid date\r",
              "    const date = new Date(responseData.createdAt);\r",
              "    pm.expect(date.getTime()).to.not.be.NaN; // Ensure it's a valid date\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {},
            "requests": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrlAirports}}/ZRH",
          "host": [
            "{{baseUrlAirports}}"
          ],
          "path": [
            "ZRH"
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "requests": {},
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "requests": {},
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrlAirports",
      "value": "http://localhost:8080/airports"
    }
  ]
}