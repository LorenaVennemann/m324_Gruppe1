name: CI Pipeline

on:
  push:
    branches:
      - main
      - 'feature/*'
      - 'bug/*'
    paths:
      - 'Code/airport-service/**'
      - 'Code/flight-service/**'
  pull_request:
    branches:
      - main
      - 'feature/*'
    paths:
      - 'Code/airport-service/**'
      - 'Code/flight-service/**'

env:
  JAVA_VERSION: '21'
  GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.caching=true'

jobs:
  # Job 1: Unit Tests
  test:
    name: Unit Tests (${{ matrix.service }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      checks: write
      pull-requests: write

    strategy:
      fail-fast: false
      matrix:
        service: [airport-service, flight-service]

    steps:
      - name: Repository auschecken
        uses: actions/checkout@v4

      - name: Java installieren
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: Gradle Wrapper ausführbar machen
        run: chmod +x ./Code/${{ matrix.service }}/gradlew

      - name: Unit Tests ausführen
        working-directory: ./Code/${{ matrix.service }}
        run: ./gradlew test --no-daemon --console=plain

      - name: Test Report veröffentlichen
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Unit Test Report (${{ matrix.service }})
          path: ./Code/${{ matrix.service }}/build/test-results/test/*.xml
          reporter: java-junit

      - name: Test Coverage Report hochladen
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.service }}
          path: ./Code/${{ matrix.service }}/build/reports/tests/test/
          retention-days: 7

  # Job 2: Build Application
  build:
    name: Build Application (${{ matrix.service }})
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 20
    permissions:
      contents: read

    strategy:
      fail-fast: false
      matrix:
        service: [airport-service, flight-service]

    steps:
      - name: Repository auschecken
        uses: actions/checkout@v4

      - name: Java installieren
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: Gradle Wrapper ausführbar machen
        run: chmod +x ./Code/${{ matrix.service }}/gradlew

      - name: Application bauen
        working-directory: ./Code/${{ matrix.service }}
        run: ./gradlew build -x test --no-daemon --console=plain --build-cache

      - name: JAR-Datei umbenennen (mit Version)
        working-directory: ./Code/${{ matrix.service }}/build/libs
        run: |
          COMMIT_SHORT=$(git rev-parse --short HEAD)
          for file in *.jar; do
            if [ -f "$file" ]; then
              mv "$file" "${{ matrix.service }}-${COMMIT_SHORT}.jar"
            fi
          done

      - name: Build-Artefakte speichern
        uses: actions/upload-artifact@v4
        with:
          name: application-jar-${{ matrix.service }}
          path: ./Code/${{ matrix.service }}/build/libs/*.jar
          retention-days: 30

      - name: Build-Grösse ausgeben
        working-directory: ./Code/${{ matrix.service }}/build/libs
        run: |
          echo "### Build Information (${{ matrix.service }})" >> $GITHUB_STEP_SUMMARY
          echo "- **JAR Size:** $(du -h *.jar | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** $(git rev-parse --short HEAD)" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Time (UTC):** $(date -u '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Time (CH):** $(TZ='Europe/Zurich' date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY

  # Job 3: API Tests
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 15
    permissions:
      contents: read

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Repository auschecken
        uses: actions/checkout@v4

      - name: Java installieren
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: Leere Datenbank erstellen
        run: |
          mysql -h 127.0.0.1 -u root -proot -e "CREATE DATABASE IF NOT EXISTS airports_db;"
          mysql -h 127.0.0.1 -u root -proot -e "CREATE DATABASE IF NOT EXISTS flights_db;"
          mysql -h 127.0.0.1 -u root -proot -e "SHOW DATABASES;"

      - name: Gradle Wrapper ausführbar machen
        run: |
          chmod +x ./Code/airport-service/gradlew
          chmod +x ./Code/flight-service/gradlew

      - name: Airport-Service starten (Hintergrund)
        working-directory: ./Code/airport-service
        run: |
          ./gradlew bootRun > app.log 2>&1 &
          echo $! > app.pid
          echo "Started airport-service with PID: $(cat app.pid)"
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/airports_db?useSSL=false&serverTimezone=UTC
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: root

      - name: Warten bis Airport-Service bereit ist
        run: |
          echo "⏳ Warte auf airport-service auf Port 8080..."
          for i in {1..30}; do
            if curl -f http://localhost:8080/actuator/health 2>/dev/null; then
              echo "✅ airport-service ist bereit!"
              exit 0
            fi
            echo "Versuch $i/30..."
            sleep 2
          done
          echo "❌ airport-service konnte nicht gestartet werden"
          echo "=== Application Logs ==="
          cat ./Code/airport-service/app.log
          exit 1

      - name: Flight-Service starten (Hintergrund)
        working-directory: ./Code/flight-service
        run: |
          ./gradlew bootRun > app.log 2>&1 &
          echo $! > app.pid
          echo "Started flight-service with PID: $(cat app.pid)"
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/flights_db?useSSL=false&serverTimezone=UTC
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: root

      - name: Warten bis Flight-Service bereit ist
        run: |
          echo "⏳ Warte auf flight-service auf Port 8081..."
          for i in {1..30}; do
            if curl -f http://localhost:8081/actuator/health 2>/dev/null; then
              echo "✅ flight-service ist bereit!"
              exit 0
            fi
            echo "Versuch $i/30..."
            sleep 2
          done
          echo "❌ flight-service konnte nicht gestartet werden"
          echo "=== Application Logs ==="
          cat ./Code/flight-service/app.log
          exit 1

      - name: Newman installieren
        run: npm install -g newman newman-reporter-htmlextra

      - name: Postman Collection ausführen
        run: |
          newman run REST-API.postman_collection.json \
            --reporters cli,htmlextra \
            --reporter-htmlextra-export postman-report.html

      - name: Postman Report als Kommentar posten
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('postman-report.html', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### Postman Test Report\n\n<details>\n<summary>Klicken, um den Bericht anzuzeigen</summary>\n\n${report}\n\n</details>`
            });

      - name: Services stoppen
        if: always()
        run: |
          if [ -f ./Code/airport-service/app.pid ]; then
            kill $(cat ./Code/airport-service/app.pid) || true
            echo "✅ airport-service gestoppt"
          fi
          if [ -f ./Code/flight-service/app.pid ]; then
            kill $(cat ./Code/flight-service/app.pid) || true
            echo "✅ flight-service gestoppt"
          fi

      - name: Application Logs hochladen
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: |
            ./Code/airport-service/app.log
            ./Code/flight-service/app.log
          retention-days: 3

      - name: Postman Report hochladen
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: postman-report
          path: postman-report.html
          retention-days: 7