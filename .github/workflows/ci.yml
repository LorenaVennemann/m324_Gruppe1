name: CI Pipeline

on:
  push:
    branches:
      - main
      - 'feature/*'
  pull_request:
    branches:
      - main
      - 'feature/*'

env:
  JAVA_VERSION: '21'
  GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.caching=true'

jobs:
  # Job 1: Tests ausführen
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      checks: write
      pull-requests: write

    steps:
      - name: Repository auschecken
        uses: actions/checkout@v4

      - name: Java installieren
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'  # Integriertes Gradle-Caching

      - name: Gradle Wrapper ausführbar machen
        run: chmod +x ./Code/airport-service/gradlew

      - name: Unit Tests ausführen
        working-directory: ./Code/airport-service
        run: ./gradlew test --no-daemon --console=plain

      - name: Test Report veröffentlichen
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Unit Test Results
          path: ./Code/airport-service/build/test-results/test/*.xml
          reporter: java-junit

      - name: Test Coverage Report hochladen
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: ./Code/airport-service/build/reports/tests/test/
          retention-days: 7

  # Job 2: Application bauen
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 20
    permissions:
      contents: read

    steps:
      - name: Repository auschecken
        uses: actions/checkout@v4

      - name: Java installieren
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: Gradle Wrapper ausführbar machen
        run: chmod +x ./Code/airport-service/gradlew

      - name: Application bauen
        working-directory: ./Code/airport-service
        run: ./gradlew build -x test --no-daemon --console=plain --build-cache

      - name: JAR-Datei umbenennen (mit Version)
        working-directory: ./Code/airport-service/build/libs
        run: |
          COMMIT_SHORT=$(git rev-parse --short HEAD)
          for file in *.jar; do
            if [ -f "$file" ]; then
              mv "$file" "airport-service-${COMMIT_SHORT}.jar"
            fi
          done

      - name: Build-Artefakte speichern
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: ./Code/airport-service/build/libs/*.jar
          retention-days: 30

      - name: Build-Grösse ausgeben
        working-directory: ./Code/airport-service/build/libs
        run: |
          echo "### Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **JAR Size:** $(du -h *.jar | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** $(git rev-parse --short HEAD)" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Time:** $(date)" >> $GITHUB_STEP_SUMMARY